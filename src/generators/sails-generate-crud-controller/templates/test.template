const request = require('supertest');
const jsf = require('json-schema-faker');
const expect = require('chai').expect;
const schema = require('../../../api/models/schema/<%= entityName %>').schema;
jsf.extend('faker', () => require('faker'));

jsf.option('optionalsProbability', 0.3);
const entity = '<%= entity %>';

console.log("TESTS:: Starting tests on ".blue, entity);
let savedData;
let data;

describe(entity.toUpperCase() + ' APIS :: ', () => {
  // POST
  describe('#POST() :: ', () => {
    describe('WITHOUT TOKEN :: ', () => {
      it('should give 401 error', (done) => {
        data = jsf.generate(schema);
        request(sails.hooks.http.app)
          .post('/api/' + entity)
          .send(data)
          .expect(401)
          .then((response) => {
            expect(response.body.body).to.be.undefined;
            done();
          })
          .catch((err) => {
            console.error(err);
            done(err);
          });
      });
    });

    describe('WITHOUT FIELD :: ', () => {
      schema.required.forEach((field) => {
        describe(field + ' :: ', () => {
          it('should give 400 error', (done) => {
            data = jsf.generate(schema);
            delete data[field];
            request(sails.hooks.http.app)
              .post('/api/' + entity)
              .set('Authorization', 'Bearer ' + sails.config.auth)
              .send(data)
              .expect(400)
              .then((response) => {
                expect(response.body.body).to.be.undefined;
                done();
              })
              .catch((err) => {
                sails.tracer.error(err);
                done(err);
              });
          });
        });
      });
    });

    describe('WITH PROPER DATA :: ', () => {
      it('should add values and return the data', (done) => {
        data = jsf.generate(schema);
        console.log("current request", data);
        request(sails.hooks.http.app)
          .post('/api/' + entity)
          .set('Authorization', 'Bearer ' + sails.config.auth)
          .send(data)
          .expect(200)
          .then((response) => {
            expect(response.body.body).to.not.be.undefined;
            for (const key in response.body.body) {
              if (['_id', 'lastModifiedOn', 'createdOn'].indexOf(key) !== -1) {
                continue;
              }
              expect(response.body.body[key]).to.equals(data[key]);
            }
            savedData = response.body.body;
            done();
          })
          .catch((err) => {
            sails.tracer.error(err);
            done(err);
          });
      });

      // ADD SECOND DATA WITH DIFFERENT POST VALUES
      it('should add values and return the data', (done) => {
        data = jsf.generate(schema);
        request(sails.hooks.http.app)
          .post('/api/' + entity)
          .set('Authorization', 'Bearer ' + sails.config.auth)
          .send(data)
          .expect(200)
          .then((response) => {
            expect(response.body.body).to.not.be.undefined;
            for (const key in response.body.body) {
              if (['_id', 'lastModifiedOn', 'createdOn'].indexOf(key) !== -1) {
                continue;
              }
              expect(response.body.body[key]).to.equals(data[key]);
            }
            savedData1 = response.body.body;
            done();
          })
          .catch((err) => {
            console.error(err);
            done(err);
          });
      });
    });
  });

  // LIST
  describe('#LIST() :: ', () => {
    describe('WITHOUT TOKEN :: ', () => {
      it('should give 401 error', (done) => {
        request(sails.hooks.http.app)
          .get('/api/' + entity)
          .expect(401)
          .then((response) => {
            expect(response.body.body).to.be.undefined;
            done();
          })
          .catch((err) => {
            console.error(err);
            done(err);
          });
      });
    });

    describe('WITH PROPER DATA :: ', () => {
      describe('WITHOUT LOV :: ', () => {
        it('should give list with default pagination', (done) => {
          request(sails.hooks.http.app)
            .get('/api/' + entity)
            .set('Authorization', 'Bearer ' + sails.config.auth)
            .expect(200)
            .then((response) => {
              expect(response.body.body).to.have.length.above(0);
              expect(response.body.page).to.equals(0);
              expect(response.body.count).to.equals(sails.config.enyo.defaultPagination);
              expect(response.body.totalCount).to.be.above(0);
              done();
            })
            .catch((err) => {
              console.error(err);
              done(err);
            });
        });
      });

      describe('WITH LOV :: ', () => {
        it('should give list with lov pagination', (done) => {
          request(sails.hooks.http.app)
            .get('/api/' + entity + '?listOfValues=true')
            .set('Authorization', 'Bearer ' + sails.config.auth)
            .expect(200)
            .then((response) => {
              expect(response.body.body).to.have.length.above(0);
              expect(response.body.page).to.equals(0);
              expect(response.body.count).to.equals(sails.config.enyo.defaultLovPagination);
              expect(response.body.totalCount).to.be.above(0);
              done();
            })
            .catch((err) => {
              console.error(err);
              done(err);
            });
        });
      });
    });
  });

  // UPDATE
  describe('#UPDATE() :: ', () => {
    describe('WITHOUT TOKEN :: ', () => {
      it('should give 401 error', (done) => {
        data = jsf.generate(schema);
        request(sails.hooks.http.app)
          .put('/api/' + entity + '/' + savedData._id)
          .send(data)
          .expect(401)
          .then((response) => {
            expect(response.body.body).to.be.undefined;
            done();
          })
          .catch((err) => {
            console.error(err);
            done(err);
          });
      });
    });

    describe('WRONG ID :: ', () => {
      it('should give 404 error', (done) => {
        data = jsf.generate(schema);
        request(sails.hooks.http.app)
          .put('/api/' + entity + '/wrong' + savedData._id)
          .set('Authorization', 'Bearer ' + sails.config.auth)
          .send(data)
          .expect(404)
          .then((response) => {
            expect(response.body.body).to.be.undefined;
            done();
          })
          .catch((err) => {
            console.error(err);
            done(err);
          });
      });
    });

  // GET
  describe('#GET() :: ', () => {
    describe('WITHOUT TOKEN :: ', () => {
      it('should give 401', (done) => {
        request(sails.hooks.http.app)
          .get('/api/' + entity + '/' + savedData._id)
          .expect(401)
          .then((response) => {
            expect(response.body.body).to.be.undefined;
            done();
          })
          .catch((err) => {
            console.error(err);
            done(err);
          });
      });
    });

    describe('WRONG ID :: ', () => {
      it('should give 404 error', (done) => {
        request(sails.hooks.http.app)
          .get('/api/' + entity + '/wrong' + savedData._id)
          .set('Authorization', 'Bearer ' + sails.config.auth)
          .expect(404)
          .then((response) => {
            expect(response.body.body).to.be.undefined;
            done();
          })
          .catch((err) => {
            console.error(err);
            done(err);
          });
      });
    });

    describe('PROPER DATA :: ', () => {
      it('should return value', (done) => {
        request(sails.hooks.http.app)
          .get('/api/' + entity + '/' + savedData._id)
          .set('Authorization', 'Bearer ' + sails.config.auth)
          .expect(200)
          .then((response) => {
            for (const key in response.body.body) {
              if (['_id', 'lastModifiedOn', 'createdOn'].indexOf(key) !== -1) {
                continue;
              }
              console.warn(key, response.body.body[key], savedData[key]);
              expect(response.body.body[key]).to.equals(savedData[key]);
            }
            savedData = response.body.body;
            done();
          })
          .catch((err) => {
            console.error(err);
            done(err);
          });
      });
    });
  });


  // DELETE
  describe('#DELETE() :: ', () => {
    describe('WITHOUT TOKEN :: ', () => {
      it('should give 401', (done) => {
        request(sails.hooks.http.app)
          .delete('/api/' + entity + '/' + savedData._id)
          .expect(401)
          .then((response) => {
            expect(response.body.body).to.be.undefined;
            done();
          })
          .catch((err) => {
            console.error(err);
            done(err);
          });
      });
    });

    describe('WRONG ID :: ', () => {
      it('should give 404 error', (done) => {
        request(sails.hooks.http.app)
          .delete('/api/' + entity + '/wrong' + savedData._id)
          .set('Authorization', 'Bearer ' + sails.config.auth)
          .expect(404)
          .then((response) => {
            expect(response.body.body).to.be.undefined;
            done();
          })
          .catch((err) => {
            console.error(err);
            done(err);
          });
      });
    });

    describe('PROPER DATA :: ', () => {
      it('should return value', (done) => {
        request(sails.hooks.http.app)
          .delete('/api/' + entity + '/' + savedData._id)
          .set('Authorization', 'Bearer ' + sails.config.auth)
          .expect(200)
          .then((response) => {
            expect(response.body.status).to.equals('OK');
            done();
          })
          .catch((err) => {
            console.error(err);
            done(err);
          });
      });
    });

    describe('CHECK IF DELETED :: ', () => {
      it('should give 404 error', (done) => {
        request(sails.hooks.http.app)
          .get('/api/' + entity + '/' + savedData._id)
          .set('Authorization', 'Bearer ' + sails.config.auth)
          .expect(404)
          .then((response) => {
            expect(response.body.body).to.be.undefined;
            done();
          })
          .catch((err) => {
            console.error(err);
            done(err);
          });
        });
      });
    });
  });
});
